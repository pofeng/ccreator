import { GoogleGenAI, Type } from "@google/genai";
import { PROMPT_1_BLOG_POST, PROMPT_2_BRIEFING_DOCUMENT } from '../constants';
import type { GeneratedContent } from '../types';

if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const responseSchema = {
  type: Type.OBJECT,
  properties: {
    blogPost: {
      type: Type.STRING,
      description: "The generated blog post in Traditional Chinese (Taiwan) based on the first prompt. It should be well-structured with a headline, introduction, distinct sections with bolded subheadings, and a conclusion. The content should be formatted with HTML tags."
    },
    briefingDocument: {
      type: Type.STRING,
      description: "The generated briefing document in Traditional Chinese (Taiwan) based on the second prompt. It should include an Executive Summary and a detailed analysis with headings and bullet points. The content should be formatted with HTML tags."
    },
    imagePrompt: {
      type: Type.STRING,
      description: "A concise, visually descriptive prompt in English for an image generation AI like Imagen, based on the two articles."
    }
  },
  required: ["blogPost", "briefingDocument", "imagePrompt"]
};

export async function generateContent(inputType: 'url' | 'text', value: string): Promise<GeneratedContent> {
  const sourceMaterial = inputType === 'url'
    ? `Please analyze the content of the following URL: ${value}`
    : `Please analyze the following text:\n\n${value}`;
    
  const fullPrompt = `
    You are an AI assistant that analyzes web content and generates multiple formatted outputs.
    
    ${sourceMaterial}
    
    Using the analyzed content, perform the following tasks and provide the output in Traditional Chinese (Taiwan), except for Task 3 which should be in English.
    
    Task 1: Generate a blog post using these instructions:
    "${PROMPT_1_BLOG_POST}"
    
    Task 2: Generate a briefing document using these instructions:
    "${PROMPT_2_BRIEFING_DOCUMENT}"
    
    Task 3: Based on the two articles you just generated, create a concise, visually descriptive prompt in English for an image generation AI like Imagen. The prompt should capture the core essence and mood of the content.
    
    Return the results in a JSON format according to the provided schema. Ensure the generated text for the blog post and briefing document is properly formatted with HTML tags (e.g., <h1>, <h2>, <p>, <ul>, <li>, blockquote, <strong>) for headings, paragraphs, lists, and emphasis.
  `;

  try {
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: fullPrompt,
      config: {
        responseMimeType: "application/json",
        responseSchema: responseSchema,
        temperature: 0.7,
      },
    });

    const jsonText = response.text.trim();
    const parsedJson = JSON.parse(jsonText);

    // Basic validation
    if (parsedJson.blogPost && parsedJson.briefingDocument && parsedJson.imagePrompt) {
      return parsedJson as GeneratedContent;
    } else {
      throw new Error("Invalid JSON structure received from API.");
    }
  } catch (error) {
    console.error("Error calling Gemini API:", error);
    throw new Error("Failed to generate content from the provided source.");
  }
}

export async function generateImage(prompt: string): Promise<string> {
  try {
    const response = await ai.models.generateImages({
      model: 'imagen-4.0-generate-001',
      prompt: `A visually stunning, artistic interpretation of the following concept: ${prompt}. Cinematic lighting, high detail, photorealistic, 16:9 aspect ratio.`,
      config: {
        numberOfImages: 1,
        outputMimeType: 'image/jpeg',
        aspectRatio: '16:9',
      },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
      const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
      return base64ImageBytes;
    } else {
      throw new Error("No image was generated by the API.");
    }
  } catch (error) {
    console.error("Error calling Imagen API:", error);
    throw new Error("Failed to generate an image from the prompt.");
  }
}

export async function generateImagePromptFromText(text: string): Promise<string> {
  const fullPrompt = `
    Analyze the following text content. Based on its core theme, mood, and main elements, create a concise, visually descriptive English prompt suitable for an image generation AI like Imagen.
    The prompt should aim to generate a visually stunning image with a cinematic feel, high detail, photorealistic style, and a 16:9 aspect ratio.
    Only output the image prompt, nothing else.

    Text content to analyze:
    ${text}
  `;

  try {
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash", // Use flash model for text tasks
      contents: fullPrompt,
      config: {
        temperature: 0.7,
      },
    });

    const imagePrompt = response.text.trim();
    if (imagePrompt) {
      return imagePrompt;
    } else {
      throw new Error("No image prompt was generated from the text.");
    }
  } catch (error) {
    console.error("Error calling Gemini API for image prompt generation:", error);
    throw new Error("Failed to generate image prompt from the provided text.");
  }
}